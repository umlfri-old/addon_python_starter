#import paths
from ..implementation import Message
from ..implementation import AdvProperty
#for $depend in $root.referenced
#if $depend.typeName == 'Exception'
from $paths.getImportPath($depend, $root) import $depend.identifier.upperCamelCase
#end if
#end for
#if $root.base
from $paths.getImportPath($root.base, $root) import $root.base.identifier.upperCamelCase
#end if

#def createMethod($method, $includeDoc = False)
    def ${method.identifier.lowerUnderscoreSeparated}(self#slurp
#for $parameter in $method.childrenOfType('InterfaceMethodParameter')
#if $parameter.type == '*'
, *$parameter.identifier.lowerUnderscoreSeparated#slurp
#else
, $parameter.identifier.lowerUnderscoreSeparated#slurp
#end if
#end for
):
#if $method.documentation and $includeDoc
        """
        $method.documentation.indent(8)
        """
#end if
#if $method.returnType
        return \
#end if
            Message(self.__id, '$method.apiName') \
#for $parameter in $method.parameters
#if $parameter.type == '*'
                .args_parameter('$parameter.apiName', $parameter.identifier.lowerUnderscoreSeparated) \
#else if $parameter.type.typeName == 'PrimitiveType'
                .${parameter.type.name}_parameter('$parameter.apiName', $parameter.identifier.lowerUnderscoreSeparated) \
#else
                .object_parameter('$parameter.apiName', $parameter.identifier.lowerUnderscoreSeparated) \
#end if
#end for
                .send() \
#for $exception in $method.throws
                .throws_exception($exception.exception.number, $exception.exception.identifier.upperCamelCase) \
#end for
#if not $method.returnType
                .return_void()
#else if $method.returnType.iterable and $method.returnType.type.typeName == 'PrimitiveType'
                .iterate_${method.returnType.type.name}()
#else if $method.returnType.iterable
                .iterate_object()
#else if $method.returnType.type.typeName == 'PrimitiveType'
                .return_${method.returnType.type.name}()
#else
                .return_object()
#end if
#end def
class ${root.identifier.upperCamelCase}(#if $root.base then $root.base.identifier.upperCamelCase else 'object' #):
#if $root.documentation
    """
    $root.documentation.indent(4)
    """
    
#end if
    def __init__(self, id):
        self.__id = id
#for $method in $root.childrenOfType('InterfaceMethod')
    
$createMethod($method, True)
#end for
#for $property in $root.childrenOfType('InterfaceProperty')
    $property.name = AdvProperty('$property.name', #if $property.index then 'True' else 'False' #, $property.documentation.__repr__())
#for $method in $property.childrenOfType('InterfacePropertyGetter')
    
    @${property.name}.getter
$createMethod($method.createMethod())
#end for
#for $method in $property.childrenOfType('InterfacePropertySetter')
    
    @${property.name}.setter
$createMethod($method.createMethod())
#end for
#for $method in $property.childrenOfType('InterfacePropertyIterator')
    
    @${property.name}.indexer
$createMethod($method.createMethod())
#end for
#end for
